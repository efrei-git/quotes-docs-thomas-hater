{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Programming Quotes [thomas-hater] Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs. Membres du groupe initiateur : [Lanoue Lucas] contributor-1 : [Vinh-Lam L\u00ea] contributeur-2 : [Toussaint Sarah] contributor-3 : [Feracho Matthieu]","title":"Home"},{"location":"#documentation-programming-quotes-thomas-hater","text":"Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs.","title":"Documentation Programming Quotes [thomas-hater]"},{"location":"#membres-du-groupe","text":"initiateur : [Lanoue Lucas] contributor-1 : [Vinh-Lam L\u00ea] contributeur-2 : [Toussaint Sarah] contributor-3 : [Feracho Matthieu]","title":"Membres du groupe"},{"location":"features/features/","text":"Main files main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application. Usage Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py Features and commands random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime Example $ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Features"},{"location":"features/features/#main-files","text":"main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application.","title":"Main files"},{"location":"features/features/#usage","text":"Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py","title":"Usage"},{"location":"features/features/#features-and-commands","text":"random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime","title":"Features and commands"},{"location":"features/features/#example","text":"$ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Example"},{"location":"features/functions/","text":"Core functions File functions.py load_quotes(filename) def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes random_quote(quotes) def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote print_quote(quote) def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote) add_quote(quotes, filename) def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\") display_quotes(quotes, count) def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"Core Functions"},{"location":"features/functions/#core-functions","text":"","title":"Core functions"},{"location":"features/functions/#file-functionspy","text":"","title":"File functions.py"},{"location":"features/functions/#load_quotesfilename","text":"def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes","title":"load_quotes(filename)"},{"location":"features/functions/#random_quotequotes","text":"def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote","title":"random_quote(quotes)"},{"location":"features/functions/#print_quotequote","text":"def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote)","title":"print_quote(quote)"},{"location":"features/functions/#add_quotequotes-filename","text":"def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\")","title":"add_quote(quotes, filename)"},{"location":"features/functions/#display_quotesquotes-count","text":"def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"display_quotes(quotes, count)"},{"location":"features/user-interface/","text":"Interface File main.py menu() def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\") main() def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"User Interface"},{"location":"features/user-interface/#interface","text":"","title":"Interface"},{"location":"features/user-interface/#file-mainpy","text":"","title":"File main.py"},{"location":"features/user-interface/#menu","text":"def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\")","title":"menu()"},{"location":"features/user-interface/#main","text":"def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"main()"},{"location":"logs/log-contributeur-2/","text":"Log contributeur-2 * a3a698f (HEAD -> contributeur-2, origin/contributeur-2) Added functions.md * a486892 Complete index.md and README.md (Contributor2) * 08a858d (origin/main, origin/HEAD, main) Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Contributeur 2"},{"location":"logs/log-contributeur-2/#log-contributeur-2","text":"* a3a698f (HEAD -> contributeur-2, origin/contributeur-2) Added functions.md * a486892 Complete index.md and README.md (Contributor2) * 08a858d (origin/main, origin/HEAD, main) Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Log contributeur-2"},{"location":"logs/log-contributor-1/","text":"Log contributor-1 * 192c967 (HEAD -> contributor-1, origin/contributor-1) Add files mkdocs.yml * 2d5f9f9 Add files README.md and docs/index.md * 035d954 Merge branch 'efrei-git:main' into contributor-1 |\\ | * 3e76495 Rename feature.md to features.md vu que Lam sait pas lire | * 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 | |\\ * | | c76ce5b Rename feature.md to features.md | |/ |/| * | 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d (origin/main, origin/HEAD, main) Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Contributeur 1"},{"location":"logs/log-contributor-1/#log-contributor-1","text":"* 192c967 (HEAD -> contributor-1, origin/contributor-1) Add files mkdocs.yml * 2d5f9f9 Add files README.md and docs/index.md * 035d954 Merge branch 'efrei-git:main' into contributor-1 |\\ | * 3e76495 Rename feature.md to features.md vu que Lam sait pas lire | * 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 | |\\ * | | c76ce5b Rename feature.md to features.md | |/ |/| * | 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d (origin/main, origin/HEAD, main) Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Log contributor-1"},{"location":"logs/log-contributor-3/","text":"Log contributor-3 * 7571db5 (HEAD -> contributor-3, origin/contributor-3) add files docs/user-interface.md * 032bc7b Complete index.md and README.md (contributor-3) * c672d0d (origin/main, origin/HEAD, main) Merge pull request #4 from kakotodev/contributor-1 |\\ | * 4a3f535 Merge branch 'efrei-git:main' into contributor-1 | |\\ | |/ |/| * | 700821e Merge pull request #3 from kakotodev/contributor-1 |\\ \\ | | * 209780a Update README.md | | * 336df9c Update README.md | |/ | * 7c10aeb Merge branch 'main' into contributor-1 | |\\ | |/ |/| * | 2f69723 Update README.md | * 192c967 Add files mkdocs.yml | * 2d5f9f9 Add files README.md and docs/index.md | * 035d954 Merge branch 'efrei-git:main' into contributor-1 | |\\ | |/ |/| * | 3e76495 Rename feature.md to features.md vu que Lam sait pas lire * | 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 |\\ \\ | | * c76ce5b Rename feature.md to features.md | |/ | * 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Contributeur 3"},{"location":"logs/log-contributor-3/#log-contributor-3","text":"* 7571db5 (HEAD -> contributor-3, origin/contributor-3) add files docs/user-interface.md * 032bc7b Complete index.md and README.md (contributor-3) * c672d0d (origin/main, origin/HEAD, main) Merge pull request #4 from kakotodev/contributor-1 |\\ | * 4a3f535 Merge branch 'efrei-git:main' into contributor-1 | |\\ | |/ |/| * | 700821e Merge pull request #3 from kakotodev/contributor-1 |\\ \\ | | * 209780a Update README.md | | * 336df9c Update README.md | |/ | * 7c10aeb Merge branch 'main' into contributor-1 | |\\ | |/ |/| * | 2f69723 Update README.md | * 192c967 Add files mkdocs.yml | * 2d5f9f9 Add files README.md and docs/index.md | * 035d954 Merge branch 'efrei-git:main' into contributor-1 | |\\ | |/ |/| * | 3e76495 Rename feature.md to features.md vu que Lam sait pas lire * | 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 |\\ \\ | | * c76ce5b Rename feature.md to features.md | |/ | * 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline","title":"Log contributor-3"},{"location":"logs/log-initiateur/","text":"Log Initiator * ffef1e5 (HEAD -> main, origin/main, origin/HEAD, initiator) Merge pull request #6 from Matteixou/contributor-3 |\\ | * a609f3a Merge branch 'main' into contributor-3 | |\\ | |/ |/| * | bc9bb77 Merge pull request #5 from starlague/contributeur-2 |\\ \\ | * \\ 4a0b941 Merge branch 'main' into contributeur-2 | |\\ \\ | |/ / |/| | | * | a3a698f Added functions.md | * | a486892 Complete index.md and README.md (Contributor2) | | * 7571db5 add files docs/user-interface.md | | * 032bc7b Complete index.md and README.md (contributor-3) | |/ |/| * | c672d0d Merge pull request #4 from kakotodev/contributor-1 |\\ \\ | * \\ 4a3f535 Merge branch 'efrei-git:main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 700821e Merge pull request #3 from kakotodev/contributor-1 |\\ \\ \\ | | * | 209780a Update README.md | | * | 336df9c Update README.md | |/ / | * | 7c10aeb Merge branch 'main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 2f69723 Update README.md | * | 192c967 Add files mkdocs.yml | * | 2d5f9f9 Add files README.md and docs/index.md | * | 035d954 Merge branch 'efrei-git:main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 3e76495 Rename feature.md to features.md vu que Lam sait pas lire * | | 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 |\\ \\ \\ | |_|/ |/| | | | * c76ce5b Rename feature.md to features.md | |/ | * 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline * 1aa163f (origin/gh-pages, gh-pages) Deployed c672d0d with MkDocs version: 1.6.1","title":"Initiateur"},{"location":"logs/log-initiateur/#log-initiator","text":"* ffef1e5 (HEAD -> main, origin/main, origin/HEAD, initiator) Merge pull request #6 from Matteixou/contributor-3 |\\ | * a609f3a Merge branch 'main' into contributor-3 | |\\ | |/ |/| * | bc9bb77 Merge pull request #5 from starlague/contributeur-2 |\\ \\ | * \\ 4a0b941 Merge branch 'main' into contributeur-2 | |\\ \\ | |/ / |/| | | * | a3a698f Added functions.md | * | a486892 Complete index.md and README.md (Contributor2) | | * 7571db5 add files docs/user-interface.md | | * 032bc7b Complete index.md and README.md (contributor-3) | |/ |/| * | c672d0d Merge pull request #4 from kakotodev/contributor-1 |\\ \\ | * \\ 4a3f535 Merge branch 'efrei-git:main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 700821e Merge pull request #3 from kakotodev/contributor-1 |\\ \\ \\ | | * | 209780a Update README.md | | * | 336df9c Update README.md | |/ / | * | 7c10aeb Merge branch 'main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 2f69723 Update README.md | * | 192c967 Add files mkdocs.yml | * | 2d5f9f9 Add files README.md and docs/index.md | * | 035d954 Merge branch 'efrei-git:main' into contributor-1 | |\\ \\ | |/ / |/| | * | | 3e76495 Rename feature.md to features.md vu que Lam sait pas lire * | | 7fe4e6f Merge pull request #1 from kakotodev/contributor-1 |\\ \\ \\ | |_|/ |/| | | | * c76ce5b Rename feature.md to features.md | |/ | * 2ce2190 Add feature feature.md (Contributor 1) |/ * 08a858d Initial Commit Corrig\u00e9 * 9668b77 Initial Commit * 0dd7f05 add deadline * 1aa163f (origin/gh-pages, gh-pages) Deployed c672d0d with MkDocs version: 1.6.1","title":"Log Initiator"}]}